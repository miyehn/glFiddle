//
// Pathtracer/pathtracer_kernel_ispc.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#pragma once
#include <stdint.h>



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus

#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif

#ifndef __ISPC_STRUCT_vec3__
#define __ISPC_STRUCT_vec3__
struct vec3 {
    float x;
    float y;
    float z;
};
#endif

#ifndef __ISPC_STRUCT_mat3__
#define __ISPC_STRUCT_mat3__
struct mat3 {
    struct vec3 colx;
    struct vec3 coly;
    struct vec3 colz;
};
#endif

#ifndef __ISPC_STRUCT_Camera__
#define __ISPC_STRUCT_Camera__
struct Camera {
    struct mat3 camera_to_world_rotation;
    struct vec3 position;
    float fov;
    float aspect_ratio;
};
#endif

#ifndef __ISPC_STRUCT_Triangle__
#define __ISPC_STRUCT_Triangle__
struct Triangle {
    int32_t bsdf_index;
    struct vec3 vertices[3];
    struct vec3 enormals[3];
    struct vec3 plane_n;
    float plane_k;
};
#endif

#ifndef __ISPC_STRUCT_BSDF__
#define __ISPC_STRUCT_BSDF__
struct BSDF {
    bool is_delta;
    bool is_emissive;
    struct vec3 albedo;
    struct vec3 Le;
};
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
extern "C" {
#endif // __cplusplus
    extern void raytrace_scene_ispc(struct Camera * camera, float * pixel_offsets, uint32_t num_offsets, struct Triangle * triangles, struct BSDF * bsdfs, int32_t num_triangles, uint8_t * output, int32_t width, int32_t height);
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus
